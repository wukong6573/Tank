1.gitblit的使用
上传：git push [remote] [branch] 
克隆：git clone

本机ip: 192.168.1.25

周报传输:   ftp://192.168.1.123/
用户名:ftpadmin
密码:ysb123456

一键发包给测试的地址：
https://192.168.1.201:8081/  
账号密码：test/test

测试环境非财务运维地址：
http://192.168.1.205:8087
测试环境财务运维地址：
http://192.168.1.205:8090
线上环境运维：
http://192.168.1.204:8087
测试环境模拟线上服务的地址：
https://test.cloudbags.cn:11113

测试环境服务错误日志查询（网页版）：
http://192.168.1.204:5601/app/kibana#/discover/10951460-e0ec-11e9-9d75-a3c7249593a2
查看某一模块的日志：
log.file.path.keyword : "/home/ebag/app/logs/user_info.2019-09-29.log"    and host.name.keyword : "superscholar-test"

ssh登录测试服务器看日志（SecureCRTP版）：
IP:192.168.1.205
端口：22
账号：ebag
密码：ebag
日志目录：/home/ebag/app/logs
查看日志的命令：
tail -fn 200 util_info.2019-09-29.log

小程序码的密钥:
AppId:  wx8361ba5c8fd9a420
AppSecret:   104d7e1a30e570f3da6ab3f18f538147

小程序账号:
vip@yun-bag.com
ysb123456

100快递账号:   https://sso.kuaidi100.com/sso/authorize.do
用户名：yunshubao
密码：Ayang1213


实名认证博客:
https://blog.csdn.net/fannie_yang/article/details/80311700
AppKey：23753953
AppSecret：c29d0c42ddb17877afade2ac4d275adb
AppCode：785ddf50eea34991956c58f8e2e5f50e

支付的:
商户号: 1521446821
API密钥: Ybsxb20150701passwrodWx123456789(也叫做支付的key)


打开远程命令: mstsc  
123密码:www.163.com


某一个模块的application.yml配置:
1.自身的端口号和模块名称
2.与注册中心eureka-service的连接配置
3.加载mabatis的mapper映射文件
4.安全框架配置oauth2   -----这块不太理解
5.分页插件的配置
6.hystrix熔断机制  -------不太理解
7.日志打印级别配置
8.数据库相关配置

常出现的bug:
1.String body ="" ,原因是 oauth认证类出现异常,没有查到相关数据

2.数据库的datetime格式字段,实体类可以不用转换格式,直接 String birthday 即可展示页面

3.返回对象里边,注意属性和字段不一致,造成的返回数据为null的异常

4.mybatis映射文件中,IFNULL函数没有提示,但是可以生效

5.mysql的select 中有index字段,需要加上别名，或者加符号 `index`进行转义,否则会报错


6.随机数相关：
r.nextInt (201) ; // 这个是0 - 200

7.mybatis懒加载配置
mybatis:
  mapper-locations: classpath:mapper/*.xml
  configuration:
    lazy-loading-enabled: true
       //按需加载,填写false
    aggressive-lazy-loading: false

这样就实现了全局懒加载，若个别需要关闭，可用 fetchType=“eager”,

<resultMap>
<collection property="" fetchType="eager"/>
</resultMap>

9.前端后台传递数据类型不一致:
异常:  Can not deserialize instance of java.lang.String out of START_OBJECT token

10.Dao层的  void updateErrorBookState(List<String> exists),  List<String>作为参数的mapper写法:
<foreach collection="list" item="exists" open="(" separator="," close=")">
            #{exists}
        </foreach>
11.Mybatis Mapper.xml 需要查询返回List<String>
<select id="getByIds"  parameterType="java.lang.String"  resultType="java.lang.String>

12.Illegal mix of collations (utf8mb4_unicode_ci,IMPLICIT) and (utf8mb4_general_ci,IMPLICIT) for operation ‘=’
在使用的varchar 类型字段中添加字符排序方式：select * from user where mobile = in_mobile COLLATE utf8_unicode_ci;

13.修改某一字段的字符集
  ALTER TABLE t_xxl_answer CHANGE 字段名 字段名 VARCHAR(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci

14. 解决mybatis 不能使用< 符号的问题:
<![CDATA[<if test="parameter.containsKey('sendAreaName')" >
            and a.send_area_name <#{sendAreaName} 
        </if>]]>

15.学霸神器 本模块操作一次表A,调用其他模块,重复对同一张表 进行操作,会夏继巴报异常....例如,hystrix....time out and no fallback...

16.java链式开发,注解配合起来用:

import lombok.Data;

@Data
@Accessors(chain = true)
public class Student{
    int age;
    String name;
}
即可实现,实体对象可通过链式set方式给属性注入值

17.springboot 的@datetimeformat 不起作用问题
@DateTimeFormat(pattern = "yyyy年MM月dd日 HH:mm:ss")
@JsonFormat(pattern = "yyyy年MM月dd日 HH:mm:ss",timezone = "GMT+8")
private Date createDate; (注意是Date类型才生效)

18. 注意:用Arrays.asList( )方法,添加的集合,不支持 list.remove( )操作.

19.小布尔类型boolean,字段名如果是is开头,例如 isPay,返回给前端的就是pay,后台给boolean设置值,也是setPay(true),而不是setIsPay;
    大Boolean类型,字段名叫啥,就返回啥,设置值也跟其字段名保持一致

20.调用第三方接口的通用代码:
 //获取运单数据
        StringBuffer url = new StringBuffer("https://api.weixin.qq.com/cgi-bin/express/business/order/get?access_token=ACCESS_TOKEN");
        String accessToken = TokenUtil.getAccess_token();
        url.append(accessToken);//设置accessToken
        JSONObject json = new JSONObject();
        json.put("order_id", transportInfoVo.getOid());//设置openid
        json.put("openid", transportInfoVo.getOpenid());
        json.put("delivery_id", "SF");
        json.put("waybill_id",transportInfoVo.getWaybillId());//设置模板id
        Map<String, Object> map = null;
        try {
            HttpClient client = HttpClientBuilder.create().build();//构建一个Client
            HttpPost post = new HttpPost(url.toString());//构建一个POST请求
            StringEntity s = new StringEntity(json.toString(), "UTF-8");
            s.setContentEncoding("UTF-8");
            s.setContentType("application/json; charset=UTF-8");
            post.setEntity(s);//设置编码，不然模板内容会乱码
            HttpResponse response = client.execute(post);//提交POST请求
            HttpEntity result = response.getEntity();//拿到返回的HttpResponse的"实体"
            String content = EntityUtils.toString(result);
            JSONObject res = JSONObject.fromObject(content);//转为json格式
            //把信息封装到map
//            map = (Map<String, Object>) JSONObject.toBean(res);
            if (res != null && "ok".equals(res.get("errMsg"))) {
                System.out.println("运单消息查询成功");
            } else {
                //封装一个异常
                StringBuilder sb = new StringBuilder("运单消息查询失败\n");
                sb.append(res.toString());
                throw new Exception(sb.toString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

21.物流助手--产生运单号,总是失败,检查参数的结构,json 嵌套一个jsonList

 "cargo": {
    "count": 2,
    "weight": 5.5,
    "space_x": 30.5,
    "space_y": 20,
    "space_z": 20,
    "detail_list": [
      {
        "name": "一千零一夜钻石包",
        "count": 1
      },
      {
        "name": "爱马仕铂金包",
        "count": 1
      }
    ]
  }

22.mysql设置自动增长的值:
 ALTER   TABLE   表名 AUTO_INCREMENT   =10001000; 

23.给表新增一列的语法:
alter table book add title varchar(1024) not null default '' after id;

24.调用第三方接口,返回有中文,解决乱码问题的代码
BufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent(), "UTF-8"));
                String temp = reader.readLine();
                content+=temp;
                entity.consumeContent();

25.分页查询需要用到的操作:
PageHelper.startPage(commentVo.getPage(), commentVo.getPageSize(), true);
        List<VideoComment> c1 = commentDao.queryComment1(commentVo);
        PageInfo<VideoComment> comments = new PageInfo<>(c1);
        List<VideoComment> comments1 = comments.getList();


26.实体对象里面有个List<Object> onelist,mybatis 的foreach的sql写法:
注:collection 是 onelist,而不是list
（insert的时候，不需要values）
<foreach collection="onelist" item="item" index="index" separator="union">
            SELECT
            UUID(),
            #{item.oosUrl},
            #{item.sentenceId},
            #{item.startTime},
            #{item.endTime},
            #{id},
            NOW()
            FROM dual
</foreach>

27.把本地的jar安装到maven仓库:
首先,确定是否配置过maven环境变量%MAVEN_HOME%,在path里面添加 %MAVEN_HOME%\bin 即可

执行命令: mvn install:install-file -Dfile=D:\MiPush_Server_Java_20190420\java\sdk\MiPush_SDK_Server_2_2_21.jar 
-DgroupId=MiPush.SDK.Server -DartifactId=MiPush_SDK_Server -Dversion=2.2.21 -Dpackaging=jar

导入依赖:
<dependency>
      <groupId>MiPush.SDK.Server</groupId>
      <artifactId>MiPush_SDK_Server</artifactId>
      <version>2.2.21</version>
    </dependency>
容易出现的问题:
 No plugin found for prefix '?install' in the current project and in the plugin groups:

28.mybatis插入语句,返回主键id:
<selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            select @@IDENTITY as id
        </selectKey>

29.如果parameter 参数是 List<Object> lists,插入insert语句的foreach 循环代码如下:
注意:item要写上去,collection="list" ,并不是集合的名字
<foreach collection="list" item="item" index="index" separator="union">
            SELECT
            #{item.code},
            #{item.name},
            NOW()
            FROM dual
 </foreach>

30.重新Collections.sort方法,自定义排序方式:
List<Integer> list = Arrays.asList(1, 3, 5);
 Collections.sort(list, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                if(o1<o2){
              //compare返回的数 大于0,就把两个数的位置调换,,所以做的是降序操作
                    return 1;
                }else if(o1>o2){
                    return -1;
                }else {
                    return 0;
                }
            }
});
 System.out.println(list); //返回  5 3 1

31.对集合进行过滤：
    List<Integer> list = Arrays.asList(1, 7, 5);
    List<Integer> collect = list.stream().filter(index -> 1 == index).collect(Collectors.toList());
    System.out.println(collect);  //返回 [1]

32.spring 的版本不兼容，我这边的原因是spring-boot-starter-parent的版本太高，我把它改为1.5.6.RELEASE就可以了：
org.springframework.boot.context.logging.ClasspathLoggingApplicationListener...

33.这个类TokenEndpoint extends AbstractEndpoint 把(Principal 里的"android" 变成，登录的账号：
@RequestMapping(value = "/oauth/token", method=RequestMethod.POST)
	public ResponseEntity<OAuth2AccessToken> postAccessToken(Principal principal, @RequestParam
	Map<String, String> parameters) ；

34.验证access_token流程 
OAuth2AuthenticationProcessingFilter 类
Authentication authResult = authenticationManager.authenticate(authentication);
——》OAuth2AuthenticationManager authenticate 方法 OAuth2Authentication auth = tokenServices.loadAuthentication(token);

——》DefaultTokenServices loadAuthentication 方法 OAuth2AccessToken accessToken = tokenStore.readAccessToken(accessTokenValue);

——》JdbcTokenStore readAccessToken 方法，
然后会调用 TokenStore 的readAuthentication（OAuth2AccessToken token)）方法，生成 OAuth2Authentication，并返回
所以，我们只需要重新TokenStore的readAccessToken 方法，就可以自定义验证方式

35.List<object> list 数据类型不用pageInfo 做分页的分页处理：
比如集合中的内容为1,2,3,4,5，list.sublist(2,4)就返回一个子集合，它的内容包括从下标为2到下标为4,而且这是左闭右开的，就是说是从大于等于2到小于4，那子集内容就是3,4（集合的下标都是从0开始）

分页逻辑：
int subSize = 1000;  //每页数量
        int subCount = list.size();  //总数
        int subPageTotal = (subCount / subSize) + ((subCount % subSize > 0) ? 1 : 0);
        // 根据页码取数据
        for (int i = 0, len = subPageTotal - 1; i <= len; i++) {
            // 分页计算
            int fromIndex = i * subSize;
            int toIndex = ((i == len) ? subCount : ((i + 1) * subSize));
            List<String> strings = list.subList(fromIndex, toIndex);
        }

36.springboot使用@EnableScheduling注解,完成定时任务:
1第一步:
自定义一个类, ScheduConfig 类上面 使用 @Scheduling 注解,
2.第二部:
ScheduConfig中 再写一方法 runTask() 方法上 使用 @Scheduled(cron = "0,1,2,3,4 * * * * MON-SAT")
 注解
其中Scheduled注解中有以下几个参数：

　　1.cron是设置定时执行的表达式，如 0 0/5 * * * ?每隔五分钟执行一次 秒 分 时 天 月

　　2.zone表示执行时间的时区

　　3.fixedDelay 和fixedDelayString 表示一个固定延迟时间执行，上个任务完成后，延迟多长时间执行

　　4.fixedRate 和fixedRateString表示一个固定频率执行，上个任务开始后，多长时间后开始执行

　　5.initialDelay 和initialDelayString表示一个初始延迟时间，第一次被调用前延迟的时间
3.第三部:
如果是放在springboot项目中,可能不需要写main() 方法,
public static void main(String[] args) {
//利用AnnotationConfigApplicationContext 把ScheduConfig.class 给它,就可以执行定时任务了
 AnnotationConfigApplicationContext applicationContext=new AnnotationConfigApplicationContext(ScheduConfig.class);
}
举例：
public class ScheduConfig {
/**
     * second（秒）, minute（分）, hour（时）, day of month（日）, month（月）, day of week（周几）.
    
 * 例子：
     
*  【0 0/5 14,18 * * ?】 每天14点整，和18点整，每隔5分钟执行一次
     
*  【0 15 10 ? * 1-6】 每个月的周一至周六10:15分执行一次
     
*  【0 0 2 ? * 6L】每个月的最后一个周六凌晨2点执行一次
    
 *  【0 0 2 LW * ?】每个月的最后一个工作日凌晨2点执行一次
     
*  【0 0 2-4 ? * 1#1】每个月的第一个周一凌晨2点到4点期间，每个整点都执行一次；
     */
    

@Scheduled(cron = "0,1,2,3,4 * * * * MON-SAT")
      //方法上加上注解
 public static void runTask(){
      
  System.out.println(new Date()+"发布王者战报");
   
 }

public static void main(String[] args) {
   //利用AnnotationConfigApplicationContext 把ScheduConfig.class 给它,就可以执行定时任务了
 AnnotationConfigApplicationContext applicationContext=new AnnotationConfigApplicationContext(ScheduConfig.class);
}
}

37. BigDecimal 比较:

BigDecimal a = new BigDecimal (101);

BigDecimal b = new BigDecimal (111);
 

//使用compareTo方法比较
//注意：a、b均不能为null，否则会报空指针

if(a.compareTo(b) == -1){
    System.out.println("a小于b");
}
 

if(a.compareTo(b) == 0){
    System.out.println("a等于b");
}

 
if(a.compareTo(b) == 1){
    System.out.println("a大于b");
}
 

if(a.compareTo(b) > -1){
    System.out.println("a大于等于b");
}
 

if(a.compareTo(b) < 1){
    System.out.println("a小于等于b");
}

38.com.github.pagehelper.PageHelper 有点问题,当查询的页码没数据,插件会查询所有的数据返回,不符合开发需求
需要手动控制一下:
//分页四连
        PageHelper.startPage(oralLanguageQuery.getPage(),oralLanguageQuery.getPageSize());
        List<OralUnit> oralUnits = oralLanguageDao.queryUnitsByOralLanguageTable(oralLanguageQuery);
        PageInfo<OralUnit> pageInfo=new PageInfo<>(oralUnits);
        //分页插件存在一个问题:当查询的页面没数据,插件会查询所有的数据返回,不符合开发需求
        if(oralLanguageQuery.getPage() > pageInfo.getPages()){
            pageInfo.setList(Collections.emptyList());//设置空集合
        }

39.gitBash 查看提交代码的用户名和修改用户信息
获取邮箱和用户名:
PS E:\mysite> git config user.email 
aaa@camnpr.com  
PS E:\mysite> git config user.name 
aaa
设置当前仓库的:
PS E:\mysite> git config user.name aaa 
PS E:\mysite> git config user.email aaa@camnpr.com

设置全局user.name/user.email
PS E:\mysite> git config --global user.name bbb
 PS E:\mysite> git config --global user.email bbb@gmail.com

40.强行推送代码到远程仓库以及回退版本的一些操作：
#回退所有内容到上一个版本 
git reset HEAD^ 
#回退a.py这个文件的版本到上一个版本 
git reset HEAD^ a.py 
#向前回退到第3个版本 
git reset –soft HEAD~3 
#将本地的状态回退到和远程的一样 
git reset –hard origin/master 
#回退到某个版本 
git reset 057d 
#回退到上一次提交的状态，按照某一次的commit完全反向的进行一次commit 
git revert HEAD 

#强行推送
git push origin source -f

41.将jar包打入本地仓库
复制命令：
mvn install:install-file -DgroupId=com.dm -DartifactId=dmJdbcDriver -Dversion=1.7.18 -Dpackaging=jar 
-Dfile=Dm7JdbcDriver18.jar

42.java时间日期函数
// 1当前日期 常用
        LocalDate now = LocalDate.now();//2019-10-27    
// 2 指定年份 和 一年的天数进行创建
        
LocalDate localDate = LocalDate.ofYearDay(2018, 256);
       
 System.out.println(localDate);// 2018-09-13

43.手动控制事务回滚
1.首先加上注解：@Transactional
2.手动回滚：TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();

44.输入流获取文件内容的基本操作：
try {
            FileInputStream in=new FileInputStream("C:\\\\Users\\\\unicho\\\\Desktop\\\\记事本.txt");
            byte[] bytes=new byte[1024];
            int read = 0;
            StringBuffer sb=new StringBuffer();
            while ((read=in.read(bytes)) !=-1){
                String s = new String(bytes, 0, read);
                sb.append(s);
            }
            System.out.println(sb);
        } catch (IOException e) {
            e.printStackTrace();
        }
45.mybatis 返回值相关：
A.List<object> 类型，SQL查不到内容，mybatis会返回一个非null的空集合，不会报空指针；
B.Map<String,object> 类型，SQL查不到数据，mybatis会返回一个null；

46.java时间格式转化：
String end_time = "2020-01-22 17:02:46";
SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
Date parse = format.parse(end_time); //把字符串时间转化成Date
String date=format.format(parse);  //把Date转化成String












